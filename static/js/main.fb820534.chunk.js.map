{"version":3,"sources":["App.module.css","Components/Cards/Cards.module.css","Components/Cards/Cards.jsx","api/index.js","Components/Chart/Chart.jsx","Components/Country/Country.jsx","App.js","index.js","Components/Chart/Chart.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variants","start","end","value","duration","separator","Date","toDateString","recoverd","death","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","console","log","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","Country","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","reqData","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb820534.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2ORnt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3pmho\",\"card\":\"Cards_card__1Vd8b\",\"infected\":\"Cards_infected__v90Ix\",\"recoverd\":\"Cards_recoverd__1OuCI\",\"death\":\"Cards_death__1meUg\"};","import React from 'react';\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core'\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\n\r\nconst Cards = ({data: {confirmed,recovered,deaths,lastUpdate} }) => {\r\n\r\n    if(!confirmed){\r\n        return 'loading...'\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify='center'>\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                <CardContent>\r\n                    <Typography color='textSecondary' gutterBottom> Infected </Typography>\r\n                    <Typography variants='h5'>\r\n                    <CountUp start={0} end={confirmed.value} duration={1} separator=',' />\r\n                        </Typography>\r\n                    <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variants='body2'>Number of active cases</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recoverd)}>\r\n                <CardContent>\r\n                    <Typography color='textSecondary' gutterBottom> Recoverd </Typography>\r\n                    <Typography variants='h5'>\r\n                        <CountUp start={0} end={recovered.value} duration={1} separator=',' />\r\n                    </Typography>\r\n                    <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variants='body2'>Number of recoveries cases</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.death)}>\r\n                <CardContent>\r\n                    <Typography color='textSecondary' gutterBottom> Death </Typography>\r\n                    <Typography variants='h5'>\r\n                    <CountUp start={0} end={deaths.value} duration={1} separator=',' />\r\n                    </Typography>\r\n                    <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variants='body2'>Number of death cases</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl=url;\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n    try{\r\n        const {data: {confirmed,recovered,deaths,lastUpdate} } = await axios.get(changeableUrl);\r\n\r\n        return{confirmed,recovered,deaths,lastUpdate};\r\n    }\r\n    catch(error){\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try{\r\n        const {data } = await axios.get(`${url}/daily`);\r\n\r\n        const modifiedData = data.map((dailyData)=>({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n        return (modifiedData);\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const {data:{countries}} = await axios.get(`${url}/countries`);\r\n\r\n        return countries.map((country)=>country.name);\r\n        \r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n\r\n}","import React,{ useState , useEffect } from 'react'\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line , Bar} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data:{confirmed , recovered , deaths}, country}) => {\r\n    const [dailyData,setDailyData]=useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        \r\n        fetchAPI()\r\n    },[]);\r\n\r\n    \r\n    const lineChart = (\r\n        dailyData.length\r\n        ? (\r\n        <Line \r\n            data={{\r\n            labels:dailyData.map(({date})=>date),\r\n            datasets: [{\r\n                data: dailyData.map(({confirmed})=>confirmed),\r\n                label: 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill: true,\r\n\r\n            },{\r\n                data: dailyData.map(({deaths})=>deaths),\r\n                label: 'death',\r\n                borderColor: 'red',\r\n                backgroundColor: 'rgba(255,0,0,0.5)',\r\n                fill: true,\r\n            }],\r\n        }}\r\n        />) :null\r\n\r\n    );\r\n    console.log(confirmed , recovered , deaths);\r\n\r\n    const barChart = (\r\n        confirmed \r\n        ?(\r\n            <Bar\r\n            data ={{\r\n                labels: ['Infected','Recoverd','Deaths'],\r\n                 datasets: [{\r\n                     label:'People',\r\n                     backgroundColor:[\r\n                         'rgba(0, 0, 255, 0.5)',\r\n                         'rgba(0, 255, 0, 0.5)',\r\n                         'rgba(255, 0, 0, 0.5)'\r\n                     ],\r\n                     data: [ confirmed.value , recovered.value , deaths.value ]\r\n                 }]\r\n            }}\r\n            options={{\r\n                legend:{display: false},\r\n                title:{display: true, text:`curent state in ${country}`},\r\n            }}\r\n                \r\n                />\r\n        ):null\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","import React,{useState,useEffect} from 'react';\r\nimport {NativeSelect,FormControl} from '@material-ui/core'\r\n\r\nimport { fetchCountries } from '../../api'\r\n\r\nimport {styles} from './Country.module.css'\r\n\r\n\r\n\r\nconst Country = ({handleCountryChange}) => {\r\n\r\n    const [fetchedCountries,setFetchedCountries] = useState([]);\r\n\r\nuseEffect(() => {\r\n    const fetchAPI = async () => {\r\n        setFetchedCountries(await fetchCountries());\r\n    }\r\n    fetchAPI();\r\n},[setFetchedCountries]);\r\n\r\n    return (\r\n        <FormControl className='styles.form'>\r\n            <NativeSelect defaultValue=''  onChange={(e)=> handleCountryChange(e.target.value)}>\r\n                <option value = 'global'>GLOBAL</option>\r\n                {fetchedCountries.map((country,i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default Country\r\n","import React,{useState} from 'react';\n\nimport Cards from './Components/Cards/Cards';\nimport Chart from './Components/Chart/Chart';\nimport Country from './Components/Country/Country';\n\nimport {fetchData} from './api';\n\nimport styles from './App.module.css'\n\nclass App extends React.Component {\n  \nstate = {\n  data:{},\n  country: '',\n}\n\nasync componentDidMount(){\n  const reqData = await fetchData();\n  // console.log(reqData);\n  this.setState({data:reqData  });\n}\n\nhandleCountryChange = async (country) => {\n  const reqData = await fetchData(country);\n  this.setState({data:reqData , country:country });\n}\n\n  render() {\n\n    const {data,country} = this.state\n    return (\n      <div className={styles.container}>\n\n        <Cards data={data}/>\n        <Country handleCountryChange={this.handleCountryChange} />\n        <Chart  data={data} country = {country} />\n        \n        \n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2VuhK\"};"],"sourceRoot":""}